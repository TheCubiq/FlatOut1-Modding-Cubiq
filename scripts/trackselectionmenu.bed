--///////////////////////////////////////////////////////////////////////////
--// TrackSelectionMenu.bed
--///////////////////////////////////////////////////////////////////////////
--// Copyright (c) 2004 Bugbear Entertainment ltd. 
--// All Rights Reserved.
--// 
--// Created on 11.3.2004 12:20:57
--// 
--// @Author Mikko Sivulainen (mikko.sivulainen@bugbear.fi)
--///////////////////////////////////////////////////////////////////////////



background_path = "data/menu/bg/"
trackselection_background = background_path.."class_select_background.tga"

trackmaterial= {

	--//info_ikkuna=image("track_plate.tga"),
	--//track_info=image("info_plate.tga"),

	class_fork = {
		[1] = image("class_c_fork.tga"),
		[2] = image("class_b_fork.tga"),
		[3] = image("class_a_fork.tga"),
	}
}



function unlock_first_tracks_from_class(c)
	local k,v

	for k,v in ipairs(Classes[c].Courses) do

		if PlayerProfile:GetLevelPosition(v[1].Level) == 255 then
			PlayerProfile:SetLevelPosition(v[1].Level,0)
		end
    end
end

function class_completed(c)
	local k,v
	for k,v in ipairs(Classes[c].Courses) do
		if PlayerProfile:GetLevelPosition(v[3].Level) == 0 or PlayerProfile:GetLevelPosition(v[3].Level) > 3 then return false end
	end

	return true
end

function check_class_completion_possible(c,current_level)
	local k,v

	local class_prizes = {
		[1] = 4000,
		[2] = 8000,
		[3] = 25000,
	}

	if c == 4 then 
		PlayerProfile:PossibleToFinishClass(0) 
		return 
	end

	local others_completed=true

	for k,v in ipairs(Classes[c].Courses) do
		if v[3].Level ~= current_level then
			if PlayerProfile:GetLevelPosition(v[3].Level) == 0 or PlayerProfile:GetLevelPosition(v[3].Level) > 3 then
				others_completed=false
			end
		end

		if others_completed and (PlayerProfile:GetLevelPosition(current_level) == 0 or PlayerProfile:GetLevelPosition(current_level) > 3) and PlayerProfile:GetLevelPosition(current_level) ~= 255 then
			PlayerProfile:PossibleToFinishClass(c,class_prizes[c])
		else
			PlayerProfile:PossibleToFinishClass(0)
		end
	end
end

function trackselection_check_track_unlock()
	local c
	raceresult_unlockedlevel=nil

	for c=1,3 do
		local k,v
		for k,v in ipairs(Classes[c].Courses) do
			for i=1,3 do
				local pos=PlayerProfile:GetLevelPosition(v[i].Level)
				if pos > 0 and pos < 4 and v[i+1] then
					if PlayerProfile:GetLevelPosition(v[i+1].Level) == 255 then
						PlayerProfile:SetLevelPosition(v[i+1].Level,0)
					    raceresult_unlockedlevel=ConvertToWString(Levels[v[i+1].Level].Name)
					end
				end
			end
		end
	end
end

function unlock_bonustracks(class)
	local tracks = {
		[1] = {	19,20,22,25	},
		[2] = { 48,47,23,26	},
		[3] = {	49,46,24,27	},
	}

	local k,v
	for k,v in ipairs(tracks[class]) do
		if PlayerProfile:GetLevelPosition(v) == 255 then
			PlayerProfile:SetLevelPosition(v,0)
		end
	end

end

function trackselection_check_class_unlock()
	local c1,c2,c3,c4=PlayerProfile:GetEnabledClasses()

--[[--/*
	if not c4 and class_completed(1) then
		PlayerProfile:EnableClass(4)
	    unlock_bonustracks(1)
	end

	if class_completed(2) then
		unlock_bonustracks(2)
	end

	if class_completed(3) then
		unlock_bonustracks(3)
	end


--]]--*/


	if PlayerProfile:FinishedClass() == 1 then 
		raceresult_unlockedlevel=TRACK_SILVER
		unlock_bonustracks(2)
		PlayerProfile:EnableClass(2) 
		unlock_first_tracks_from_class(2)
		results_setclasscompleted(1)
						  
	end
	if PlayerProfile:FinishedClass() == 2 then 
		raceresult_unlockedlevel=TRACK_GOLD
		unlock_bonustracks(3)
		PlayerProfile:EnableClass(3) 
		unlock_first_tracks_from_class(3)
		results_setclasscompleted(2)
	end

	if PlayerProfile:FinishedClass() == 3 then   --//CAREER MODE FINISHED!!
		results_setclasscompleted(3)
	end


end


function enter_trackselection(back_menu, selection_complete_function,backfromrace)
	local f=function()
		local m=back_menu		
		if back_menu then
			menu_trackselection_class.options.back_action=entermenu(m)
		end
		trackselection_state={}
		trackselection_state.selection_complete_function=selection_complete_function
		trackselection_state.backfromrace=backfromrace
		local c1,c2,c3,c4=PlayerProfile:GetEnabledClasses()
		if GameFlow.GetGameMode() == "SPLITSCREEN" and GameFlow.GetEventType() ~= "STUNT" then
			c4=nil
		end

		if GameFlow.GetSubEventType() == "RACE_TIMETRIAL" then
			c4=nil
		end

		if GameFlow.GetGameMode() == "SPLITSCREEN" and GameFlow.GetEventType() == "STUNT" then
			c1=nil
			c2=nil
			c3=nil
			c4=true
		end
		
		trackselection_enableclasses(c1,c2,c3,c4)

		if trackselection_state.backfromrace then
			if GameFlow.GetEventType() == "STUNT" or GameFlow.GetEventType() == "DERBY" or GameFlow.IsArenaMode() then
				trackselection_setclass(4)()
			else
				trackselection_setclass(PlayerProfile:GetCurrentClass())()
			end
		else
			EnterMenu("menu_trackselection_class") 
		end
	end
	return f
end

function trackselection_setclass(c)
	local f=function()
		local _c=c
		trackselection_state.class=_c
		if c ~= 4 then
			PlayerProfile:SetCurrentClass(_c)
		end
		EnterMenu("menu_trackselection_course")
	end
	return f
end

function trackselection_enableclasses(c1,c2,c3,c4)
	menu_trackselection_class.items={}

	if c1 then
		LOG("trackselection: enabling class 1")
		table.insert(menu_trackselection_class.items,trackselection_classes[1])
	end

	if c2 then
		LOG("trackselection: enabling class 2")
		table.insert(menu_trackselection_class.items,trackselection_classes[2])
	end

	if c3 then
		LOG("trackselection: enabling class 3")
		table.insert(menu_trackselection_class.items,trackselection_classes[3])
	end
	if c4 then
		LOG("trackselection: enabling class 4")
		table.insert(menu_trackselection_class.items,trackselection_classes[4])
	end

end


function trackselection_lock_tracks()
	
	local _,_class,_c,_course,_level,_l
	local k,v

	local unlocked = { PlayerProfile:GetEnabledClasses() }
	local i=1

	for _c,_class in ipairs(Classes) do
		if unlocked[i] then
			for _,_course in ipairs(_class.Courses) do
				for _l,_level in ipairs(_course) do
					if PlayerProfile:GetLevelPosition(_level.Level) ~= 255 then
						PlayerProfile:SetLevelPosition(_level.Level,255)
					end
				end
			end
		end
	end
end


function trackselection_unlock_profile_tracks()
	
	local _,_class,_c,_course,_level,_l
	local k,v

	local unlocked = { PlayerProfile:GetEnabledClasses() }
	local i=1

	for _c,_class in ipairs(Classes) do
		if unlocked[i] then
			for _,_course in ipairs(_class.Courses) do
				for _l,_level in ipairs(_course) do
					if PlayerProfile:GetLevelPosition(_level.Level) == 255 then
						PlayerProfile:SetLevelPosition(_level.Level,0)
					end
				end
			end
		end
	end

end


function trackselection_unlock_tracks()
	
	local _,_class,_c,_course,_level,_l
	local k,v

	local unlocked = { true,true,true }
	local i=1

	for _c,_class in ipairs(Classes) do
		if unlocked[i] then
			for _,_course in ipairs(_class.Courses) do
				for _l,_level in ipairs(_course) do
					if PlayerProfile:GetLevelPosition(_level.Level) == 255 then
						PlayerProfile:SetLevelPosition(_level.Level,0)
					end
				end
			end
		end
	end

end


function trackselection_setcourses(track)

	menu_trackselection_course.items={}

	local tracktable=Classes[trackselection_state.class].Courses

	local i
	local coursetable=tracktable[trackselection_state.track]

	for i=1,table.getn(coursetable) do
		local v=coursetable[i]
		local levelnum=v.Level
		if levelnum > 0 and PlayerProfile:GetLevelPosition(levelnum) ~= 255 then
			local f=trackselection_state.selection_complete_function(levelnum)

			local name = ConvertToWString(v.Name or string.format("Race %d",i))

			f=function()
				local event=v.EventType or "RACE"
				local subevent=v.SubEventType
				local func=trackselection_state.selection_complete_function(levelnum)
				GameFlow.SetEventType(event)

				if Levels[levelnum].Class then
					GameFlow.SetPlayerClass(Levels[levelnum].Class-1)
				else
					GameFlow.SetPlayerClass(PlayerProfile:GetCurrentClass()-1)
				end
				
				if Levels[levelnum].ArenaMode then
					GameFlow.SetArenaMode(TRUE)
				else
					GameFlow.SetArenaMode(nil)
				end

			    if subevent then
					GameFlow.SetSubEventType(subevent)
				end
				func()
			end

			local t={ name, noimage(), f }
			table.insert(menu_trackselection_course.items,t)
		end
	end

end




function trackbar(trackname,position,place1,place2,place3)
	local p=Frame{Position=position,Size=GetResourceSize(menucommon.track_balk),ShowBorders=FALSE}
	p:AttachResource(menucommon.track_balk)

	addchild(StaticText{Title=trackname,Position=POS(6,0),Size=SIZE(64,16),Font=font10(),Parent=p})
	
	addchild(Button{Position=POS(146,1),Size=GetResourceSize(menucommon.course1),Parent=p}):AttachResource(menucommon.course1)
	addchild(Button{Position=POS(191,1),Size=GetResourceSize(menucommon.course2),Parent=p}):AttachResource(menucommon.course2)
	addchild(Button{Position=POS(238,1),Size=GetResourceSize(menucommon.course3),Parent=p}):AttachResource(menucommon.course3)

	local places ={
		[255]=menucommon.lock,
		[0]=menucommon.lippu,
		[1]=menucommon.kulta,
		[2]=menucommon.hopea,
		[3]=menucommon.pronssi,
	}

	addchild(Button{Position=POS(138,22),Size=GetResourceSize(places[place1]),Parent=p}):AttachResource(places[place1])
	addchild(Button{Position=POS(184,22),Size=GetResourceSize(places[place2]),Parent=p}):AttachResource(places[place2])
	addchild(Button{Position=POS(231,22),Size=GetResourceSize(places[place3]),Parent=p}):AttachResource(places[place3])

	return p
end

barpositions = {
	SAFEPOS(4,63),
	SAFEPOS(4,163),
	SAFEPOS(4,263),
	SAFEPOS(264,113),
	SAFEPOS(264,213),
}


function showclass(num)
	windows_reset()

	StandardUpperBalk()
	StandardLowerBalk()

	local courses=Classes[num].Courses

	local i=1
	local k,v
	for k,v in ipairs(courses) do
		
		local place1=PlayerProfile:GetLevelPosition(v[1].Level)
		local place2=PlayerProfile:GetLevelPosition(v[2].Level)
		local place3=PlayerProfile:GetLevelPosition(v[3].Level)

		LOG("place1=%d,place2=%d,place3=%d",place1,place2,place3)
		
		addparent(trackbar(ConvertToWString(Levels[v[1].Level].Name),barpositions[i],place1,place2,place3))
		i=i+1
	end


	


	activateparents()
end

trackselection_state = {}

trackselection_classes = {
	{ TRACK_AMATEUR, noimage(), trackselection_setclass(1) },
	{ TRACK_INTERMEDIATE, noimage(), trackselection_setclass(2) },
	{ TRACK_PRO, noimage(), trackselection_setclass(3) },
	{ TRACK_BONUS, noimage(), trackselection_setclass(4) },
}



menu_trackselection_class = 
{
	options = {
	
		title = TRACK_TITLE,
		background = noimage(), --background("bg-mainmenu.tga"),	
		orientation = MENU_HORIZONTAL,
		position = POS(260,396),
		padding = { 60,0 },
		button  = {
			image = image("button.tga"),
		},
		
--		back_action=function()
--			LOG("return menu not defined")
--		end,
	},

	buttonchange_function = function(prevbutton,newbutton)
		--//Menu:SetMenuSubTitle(ConvertToWString(Classes[newbutton].Description))

		--//showclass(newbutton)		


--[[--/*
		--//temporary strings
		local activestring = { 
			ConvertToWString("Class C picture\nactive"),
			ConvertToWString("Class B picture\nactive"),
			ConvertToWString("Class A picture\nactive"),
		}

		local inactivestring = {
			ConvertToWString("Class C picture\ninactive"),
			ConvertToWString("Class B picture\ninactive"),
			ConvertToWString("Class A picture\ninactive"),
		}

		local i
		for i=1,3 do
			if i == newbutton then
				trackselection_state.childwins[i]:SetTitle(activestring[i])
			else
				trackselection_state.childwins[i]:SetTitle(inactivestring[i])
			end
		end
--]]--*/
	end,


	init_function = function()

		windows_reset()
		StandardUpperBalk()
		StandardLowerBalk()

		Menu:SetActiveItem(PlayerProfile:GetCurrentClass())
		
		activateparents()

		GUI:LoadBackground() --"data/menu/bg/class_select_background.tga")

		if trackselection_state.backfromrace then

			local k,v,i,carnum
			i=1
			for k,v in ipairs(cardealer_data.car_data) do
				if v.car == GameFlow:GetPlayerCar()+1 then
					carnum = i
				end
				i = i +1
			end
			MenuScene:LoadCar(GameFlow.GetPlayerCar()+1,GameFlow.GetPlayerCarSkin())
			SetMenuCamera(carnum or 1)
			MenuScene:ResetCar(Startpoints[carnum].Position,Startpoints[carnum].Orientation)
			GUI:SetRenderScene(TRUE)
			MenuScene:StartFadeOn()
		elseif GameFlow.IsCareerMode() then
			MenuScene:LoadCar(PlayerProfile:GetCarType()+1,PlayerProfile:GetCarSkin())
			SetMenuCamera(19)
			MenuScene:ResetCar(Startpoints[19].Position,Startpoints[19].Orientation)
		    GUI:SetRenderScene(TRUE)
			MenuScene:StartFadeOn()
		else
--//			MenuScene:LoadCar(GameFlow.GetPlayerCar()+1,GameFlow.GetPlayerCarSkin())
--//			SetMenuCamera(carnum or 1)
--//			MenuScene:ResetCar(Startpoints[carnum].Position,Startpoints[carnum].Orientation)
			GUI:SetRenderScene(TRUE)
			MenuScene:StartFadeOn()
		end

	end,

	deinit_function = function()
		windows_reset()

		GUI:LoadBackground()

	end,

	update_function = function()


	end,

	items = {


	},

}


function trackselection_setcourseinfo(course)
		--//trackselection_state.track=track
		--//trackselection_state.course=course

	
		local v=Classes[trackselection_state.class].Courses[trackselection_state.track][trackselection_state.course]

		local win=GetWindow("coursename")

		if v then

			if  v.Name then
				trackselection_state.coursename=ConvertToWString(v.Name)
			else
--//				if trackselection_state.class < 4 and trackselection_state.course == 4 then
--//					trackselection_state.coursename=ConvertToWString(string.format("%s Smashy",Levels[v.Level].Name))
--//				else
					trackselection_state.coursename=ConvertToWString(Levels[v.Level].Name)
--//				end
			end
			win:SetTitle(trackselection_state.coursename)
		else
			win:SetTitle(ConvertToWString(""))
		end


--//this is courseicon
		local win=GetWindow("courseicon")
		win:AttachResource(track_name_icons[v.NameIcon])




		if v.Filename then
			GUI:LoadBackground(string.format("data/menu/bg/%s",v.Filename))
		else
			local p=Classes[trackselection_state.class].Courses[trackselection_state.track]

			if p.Filename then
				GUI:LoadBackground(string.format("data/menu/bg/%s_%d.tga",p.Filename,trackselection_state.course))
			else
				GUI:LoadBackground()
			end
		end

		if Levels[v.Level].StuntMode or Levels[v.Level].Laps == 0 then
			GetWindow("lapcount"):SetTitle(ConvertToWString(""))
			GetWindow("lapcount_text"):SetTitle(ConvertToWString(""))

		else
			GetWindow("lapcount_text"):SetTitle(TRACK_LAPS)
			GetWindow("lapcount"):SetTitle(ConvertToWString(string.format("%d",Levels[v.Level].Laps or 3)))
		end

--//		local win=GetWindow("courselength")
--//		trackselection_state.courseinfo=ConvertToWString("1.2 km")
--//		win:SetTitle(trackselection_state.courseinfo)

--[[--/*		if trackselection_state.courses and trackselection_state.courses[course] then
			win=GetWindow("coursepicture")
			win:AttachResource(trackselection_state.courses[course]) --//trackdata.images[Classes[trackselection_state.class].Courses[newbutton][1].Level])
		end
--]]--*/

		if GameFlow.IsCareerMode() then
			GetWindow("best_position_text"):SetTitle(TRACK_LAST)
		else
			GetWindow("best_position_text"):SetTitle(ConvertToWString(""))
		end

		win=GetWindow("best_position")
		local hsp
		local pos=PlayerProfile:GetLevelPosition(v.Level)
--//		if pos > 0 and pos < 255 then
			hsp=GameFlow.GetPlayerLevelHighscore(v.Level)
--//		end

		
		local hs=GameFlow.GetLevelHighscore(v.Level)

		if v then
			if hsp and GameFlow.IsCareerMode() then
				win:SetTitle(hsp.ptime)
			elseif GameFlow.IsCareerMode() then
				win:SetTitle(ConvertToWString("--.  --:--:--"))
			end

			
			if GameFlow.IsCareerMode() then
				hs=hsp
			end

			if hs then
				GetWindow("besttime_name"):SetTitle(hs.name)
				GetWindow("besttime_score"):SetTitle(hs.time)
			else
				GetWindow("besttime_name"):SetTitle(ConvertToWString(""))
				GetWindow("besttime_score"):SetTitle(ConvertToWString(""))
			end
		else
			win:SetTitle(ConvertToWString(""))

			win=GetWindow("besttime_name")
			win:SetTitle(ConvertToWString("FIXME"))

			win=GetWindow("besttime_score")
			win:SetTitle(ConvertToWString("00'00''00"))
		end

		if GameFlow.IsCareerMode() then
			GetWindow("prizes_title"):SetTitle(TRACK_PRIZES)
		else
			GetWindow("prizes_title"):SetTitle(ConvertToWString(""))
		end

		win=GetWindow("prize1")
		win:SetTitle(ConvertToWString(""))
		win=GetWindow("prize2")
		win:SetTitle(ConvertToWString(""))
		win=GetWindow("prize3")
		win:SetTitle(ConvertToWString(""))

		if trackselection_state.class == 4 then 

			GetWindow("best_position_text"):SetTitle(ConvertToWString(""))
			if not hsp then hsp={} end
			if not hs then hs={} end

			local level=Levels[v.Level]
			local prizes=Levels[v.Level].Winnings
			local limits=Levels[v.Level].Score or {}

			if level.ArenaMode then
				if GameFlow.IsCareerMode() then
					win=GetWindow("prize1")
					win:SetTitle(ConvertToWString(string.format("1. $ %d",prizes[1])))
					win=GetWindow("prize2")
					win:SetTitle(ConvertToWString(string.format("2. $ %d",prizes[2])))
					win=GetWindow("prize3")
					win:SetTitle(ConvertToWString(string.format("3. $ %d",prizes[3])))
				end
				GetWindow("best_position"):SetTitle(ConvertToWString(""))
				GetWindow("besttime_score"):SetTitle(hs.time or ConvertToWString(""))
			end

			if v.EventType == "DERBY" then
				if GameFlow.IsCareerMode() then
					if limits[1] then
						win=GetWindow("prize1")
						win:SetTitle(ConvertToWString(string.format("%02d:%02d:00 - $%d",limits[1]/60,math.mod(limits[1],60),prizes[1])))					
					end
					if limits[2] then
						win=GetWindow("prize2")
						win:SetTitle(ConvertToWString(string.format("%02d:%02d:00 - $%d",limits[2]/60,math.mod(limits[2],60),prizes[2])))					
					end
					if limits[3] then
						win=GetWindow("prize3")
						win:SetTitle(ConvertToWString(string.format("%02d:%02d:00 - $%d",limits[3]/60,math.mod(limits[3],60),prizes[3])))					
					end
				end
				GetWindow("best_position"):SetTitle(ConvertToWString(""))
				GetWindow("besttime_score"):SetTitle(hs.time or ConvertToWString(""))
			end

			if v.EventType == "STUNT" then

				if v.SubEventType == "STUNT_LONGJUMP" or v.SubEventType == "STUNT_HIGHJUMP" then
					if GameFlow.IsCareerMode() then	
						if limits[1] then
							win=GetWindow("prize1")
							win:SetTitle(ConvertToWString(string.format("%dm - $%d",limits[1],prizes[1])))
						end

						if limits[2] then
							win=GetWindow("prize2")
							win:SetTitle(ConvertToWString(string.format("%dm - $%d",limits[2],prizes[2])))
						end

						if limits[3] then
							win=GetWindow("prize3")
							win:SetTitle(ConvertToWString(string.format("%dm - $%d",limits[3],prizes[3])))
						end
					end
						--//GetWindow("best_position"):SetTitle(hsp.meters or ConvertToWString(""))
					GetWindow("best_position"):SetTitle(ConvertToWString(""))
					GetWindow("besttime_score"):SetTitle(hs.meters or ConvertToWString(""))

					
				end
				if v.SubEventType == "STUNT_DARTS" or v.SubEventType == "STUNT_BOWLING" or v.SubEventType == "STUNT_CURLING" then
					if GameFlow.IsCareerMode() then	
						if limits[1] then
							win=GetWindow("prize1")
							win:SetTitle(ConvertToWString(string.format("%dpts - $%d",limits[1],prizes[1])))
						end

						if limits[2] then
							win=GetWindow("prize2")
							win:SetTitle(ConvertToWString(string.format("%dpts - $%d",limits[2],prizes[2])))
						end

						if limits[3] then
							win=GetWindow("prize3")
							win:SetTitle(ConvertToWString(string.format("%dpts - $%d",limits[3],prizes[3])))
						end
					end
						--//GetWindow("best_position"):SetTitle(hsp.points or ConvertToWString(""))
					GetWindow("best_position"):SetTitle(ConvertToWString(""))
					GetWindow("besttime_score"):SetTitle(hs.points or ConvertToWString(""))


				end
				if v.SubEventType == "STUNT_CLOWN" then
					GetWindow("best_position"):SetTitle(ConvertToWString(""))
					GetWindow("besttime_score"):SetTitle(hs.money or ConvertToWString(""))
				end
			end
		elseif GameFlow.IsCareerMode() then
			local prizes=Levels[v.Level].Winnings
			win=GetWindow("prize1")
			win:SetTitle(ConvertToWString(string.format("1. $ %d",prizes[1])))
			win=GetWindow("prize2")
			win:SetTitle(ConvertToWString(string.format("2. $ %d",prizes[2])))
			win=GetWindow("prize3")
			win:SetTitle(ConvertToWString(string.format("3. $ %d",prizes[3])))
		end

		
end



function trackselection_setcursorpos(x,y)

	local w=GetWindow("selector")

	local curclass=trackselection_state.class

	local p=trackselection_layout[curclass][y][x][3]
	trackselection_state.track=p[1]
	trackselection_state.course=p[2]

	p=trackselection_layout[curclass][trackselection_state.cursorpos.y][trackselection_state.cursorpos.x][3]
	--//dim previous icon here
	local win=trackselection_state.icons[trackselection_state.cursorpos.y][trackselection_state.cursorpos.x]

	local v=Classes[trackselection_state.class].Courses[p[1]][p[2]]
	if not win.locked then --//PlayerProfile:GetLevelPosition(v.Level) ~= 255 then
		--//win:AttachResource(track_items.courseicon1)
		win:AttachResource(track_icons[w.icon])
		wm.SetResourceFade(track_icons[trackselection_state.icons[trackselection_state.cursorpos.y][trackselection_state.cursorpos.x].icon],FALSE)
	else
		--//win:AttachResource(track_items.courseicon1_x)
		win:AttachResource(track_icons_inactive[w.icon])
		wm.SetResourceFade(track_icons_inactive[trackselection_state.icons[trackselection_state.cursorpos.y][trackselection_state.cursorpos.x].icon],FALSE)
	end

	trackselection_state.cursorpos = { x=x,y=y }


	local iconpos=trackselection_layout[curclass][y][x][1]
	local pos=SPOS(iconpos[1]-2,iconpos[2]-2)

	w:SetPosition(pos[1],pos[2])

	
	local v=Classes[trackselection_state.class].Courses[trackselection_state.track][trackselection_state.course]

	if v then
		local levelnum=v.Level
		if levelnum > 0 and not trackselection_state.icons[y][x].locked then --//levelnum > 0 and PlayerProfile:GetLevelPosition(levelnum) ~= 255 then
			--//hilight new icon here
			trackselection_state.icons[y][x]:AttachResource(track_icons[trackselection_state.icons[y][x].icon])
			wm.SetResourceFade(track_icons[trackselection_state.icons[y][x].icon],TRUE)
		else
			trackselection_state.icons[y][x]:AttachResource(track_icons_inactive[trackselection_state.icons[y][x].icon])
			wm.SetResourceFade(track_icons_inactive[trackselection_state.icons[y][x].icon],TRUE)
		end
	else
		trackselection_state.icons[y][x]:AttachResource(track_icons_inactive[trackselection_state.icons[y][x].icon])
		wm.SetResourceFade(track_icons_inactive[trackselection_state.icons[y][x].icon],TRUE)
	end

	trackselection_setcourseinfo()

end


menu_trackselection_course =
{

	options = {
	
		title = TRACK_TITLE_2,
		background = noimage(), --background("bg-mainmenu.tga"),	
		orientation = MENU_HORIZONTAL,
		position = DEFAULTBUTTONPOS(),
		padding = { 6,0 },
		button  = {
			image = image("button.tga"),
		},
		
		back_action=entermenu("menu_trackselection_class"),
	},


	init_function = function()
		windows_reset()
		
		StandardUpperBalk() --//true)
		StandardLowerBalk()

		trackselection_state.courses={}


		if trackselection_state.class < 4 then
			local size=SIZE(512,256)
			if trackselection_state.class == 1 then
				size=SIZE(256,256)
			end
			addparent(Button{Name="class_fork",Position=SPOS(30,125),Size=size}):AttachResource(trackmaterial.class_fork[trackselection_state.class])
		end

		local icon_frame=addparent(Frame{Name="icon_frame",Position=SPOS(0,0),Size=SIZE(355,287),ShowBorders=FALSE})
		addparent(Button{Name="selector",Position=POS(0,0),Size=GetResourceSize(track_items.selector),Layer=2}):AttachResource(track_items.selector)
		trackselection_createcourselayout()

--//		trackselection_state.courses[1] = track_material.rata_1
--//		trackselection_state.courses[2] = track_material.rata_2
--//		trackselection_state.courses[3] = track_material.rata_3

		local parentpos=SPOS(0,322)
		local parent=addparent(Frame{ Position=parentpos, Size=SIZE(320,35), ShowBorders=FALSE, })

		parent:AttachResource(track_items.record_balk)

--// Record & bestime/bestscore pois

		addchild(StaticText{Title=TRACK_RECORD,Color=GetPaletteColor(18), Position=RELATIVEPOS(POS(58,357),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		--//	addchild(StaticText{ Name="courselength", Position=RELATIVEPOS(POS(425,213),parentpos), Size=SIZE(224,32), Font=font10(), Parent=parent })
		--//	addchild(StaticText{ Name="coursetype",Position=RELATIVEPOS(POS(425,228),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })
		--//	addchild(StaticText{ Name="weather",Position=RELATIVEPOS(POS(425,243),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })
		addchild(StaticText{ Name="besttime_name",Position=RELATIVEPOS(POS(58,377),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })
		addchild(StaticText{ Name="besttime_score",Position=RELATIVEPOS(POS(245,377),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		parentpos=SPOS(375,118)
		parent=addparent(Frame{Position=parentpos,Size=SIZE(245,27),ShowBorders=FALSE})
		parent:AttachResource(track_items.small_balk)


		addchild(Button{ Name="courseicon", Position=RELATIVEPOS(SPOS(373,80),parentpos), Size=GetResourceSize(track_name_icons.derby), Parent=parent, })
--//		addchild(StaticText{ Name="coursename", Position=RELATIVEPOS(SPOS(395,85),parentpos), Size=SIZE(224,42), Font=font14(), Parent=parent, })
		addchild(StaticText{Name="coursename", Position=RELATIVEPOS(SPOS(383,122),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		parentpos=SPOS(350,144)

		parent=addparent(Frame{Position=parentpos,Size=SIZE(245,214),ShowBorders=FALSE})
		parent:AttachResource(track_items.big_balk)

		addchild(StaticText{Name="lapcount_text",Title=TRACK_LAPS,Color=GetPaletteColor(18), Position=RELATIVEPOS(SPOS(396,156),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		addchild(StaticText{Name="lapcount",Position=RELATIVEPOS(SPOS(512,175),parentpos), Size=SIZE(60,16), Font=font18(), Parent=parent })

		addchild(StaticText{Name="prizes_title",Title=TRACK_PRIZES,Color=GetPaletteColor(18), Position=RELATIVEPOS(SPOS(396,211),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		addchild(StaticText{Name="prize1",Position=RELATIVEPOS(SPOS(400,234),parentpos),Size=SIZE(60,16),Font=font12(),Parent=parent})
		addchild(StaticText{Name="prize2",Position=RELATIVEPOS(SPOS(400,254),parentpos),Size=SIZE(60,16),Font=font12(),Parent=parent})
		addchild(StaticText{Name="prize3",Position=RELATIVEPOS(SPOS(400,274),parentpos),Size=SIZE(60,16),Font=font12(),Parent=parent})

		addchild(StaticText{Name="best_position_text",Title=TRACK_LAST,Color=GetPaletteColor(18), Position=RELATIVEPOS(SPOS(396,305),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		addchild(StaticText{Name="best_position",Position=RELATIVEPOS(SPOS(400,328),parentpos),Size=SIZE(260,16),Font=font12(),Parent=parent})

		--//	addchild(Button{Position=POS(8,1),Size=GetResourceSize(menucommon.nuoliylos),Parent=parent}):AttachResource(menucommon.nuoliylos)
		--//	addchild(Button{Position=POS(8,17), Size=GetResourceSize(menucommon.nuolialas), Parent=parent}):AttachResource(menucommon.nuolialas)

		--//	addchild(Button{Name="coursepicture",Position=RELATIVEPOS(SPOS(366,267),parentpos), Size=GetResourceSize(trackselection_state.courses[1]), Parent=parent})

		--//	addchild(StaticText{ Title=TRACK_LENGHT, Position=RELATIVEPOS(POS(350,218),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })
		--//	addchild(StaticText{ Title=TRACK_TRACK, Position=RELATIVEPOS(POS(350,233),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })
		--//	addchild(StaticText{ Title=TRACK_WEATHER, Position=RELATIVEPOS(POS(350,248),parentpos), Size=SIZE(60,16), Font=font10(), Parent=parent })

		
		


		trackselection_state.cursorpos={x=1,y=1}
		trackselection_setcursorpos(1,1)

		local key=addparent(InputHandler{})

		key.onKeyPressed=function(self, Character, VirtualKey, ScanCode)
			if VirtualKey == KeyCodes["BUTTON_LEFT"] then
				self:onMoveLeft()
			end
			if VirtualKey == KeyCodes["BUTTON_RIGHT"] then
				self:onMoveRight()
		    end
			if VirtualKey == KeyCodes["BUTTON_UP"] then
				self:onMoveUp()
		    end
			if VirtualKey == KeyCodes["BUTTON_DOWN"] then
				self:onMoveDown()
		    end
			if VirtualKey == KeyCodes["BUTTON_START"] then
				self:onAction()
		    end
			if VirtualKey == KeyCodes["BUTTON_SELECT"] then
				self:onEscape()
		    end
		end

		key.onMoveLeft = function(self)
			local x=trackselection_state.cursorpos.x
			local y=trackselection_state.cursorpos.y

			if x > 1 then 
				x = x -1
			end
			trackselection_setcursorpos(x,y)
			playmenusound_move()

		end

		key.onMoveRight = function(self)
			local x=trackselection_state.cursorpos.x
			local y=trackselection_state.cursorpos.y

			if x < table.getn(trackselection_layout[trackselection_state.class][y]) then 
				x = x + 1
			end
			trackselection_setcursorpos(x,y)
			playmenusound_move()
		end

		key.onMoveUp = function(self)
			local x=trackselection_state.cursorpos.x
			local y=trackselection_state.cursorpos.y

			if y > 1 then 
				y = y -1
			end
			trackselection_setcursorpos(x,y)
			playmenusound_move()
		end

		key.onMoveDown = function(self)
			local x=trackselection_state.cursorpos.x
			local y=trackselection_state.cursorpos.y

			if y < table.getn(trackselection_layout[trackselection_state.class]) then 
				y = y + 1
			end
			trackselection_setcursorpos(x,y)
			playmenusound_move()
		end

		key.onAction = function(self)
			local v=Classes[trackselection_state.class].Courses[trackselection_state.track][trackselection_state.course]
			local x=trackselection_state.cursorpos.x
			local y=trackselection_state.cursorpos.y

			if v then
				local levelnum=v.Level
				if levelnum > 0 and not trackselection_state.icons[y][x].locked then --//PlayerProfile:GetLevelPosition(levelnum) ~= 255 then
					local subevent=v.SubEventType
					local func=trackselection_state.selection_complete_function(levelnum)

					local event=v.EventType or "RACE"
					local subevent=v.SubEventType
					local func=trackselection_state.selection_complete_function(levelnum)
					GameFlow.SetEventType(event)

					if Levels[levelnum].Class then
						GameFlow.SetPlayerClass(Levels[levelnum].Class-1)
					else
						GameFlow.SetPlayerClass(PlayerProfile:GetCurrentClass()-1)
					end
					
					if Levels[levelnum].ArenaMode then
						GameFlow.SetArenaMode(TRUE)
					else
						GameFlow.SetArenaMode(nil)
					end

					if subevent then
						GameFlow.SetSubEventType(subevent)
					end
					playmenusound_action()
					func()
				end
			else
				playmenusound_error()
			end
		end

		key.onEscape = function(self)
			playmenusound_back()
			EnterMenu("menu_trackselection_class")
		end

		activateparents()

	end,

	deinit_function = function()

		windows_reset()


		local _y,y
		for _y,y in ipairs(trackselection_state.icons) do
			local x,_x
			for _x,x in ipairs(y) do
				wm.SetResourceFade(track_icons[trackselection_state.icons[_y][_x].icon],FALSE)
				wm.SetResourceFade(track_icons_inactive[trackselection_state.icons[_y][_x].icon],FALSE)
			end
		end

		trackselection_state.icons=nil
--//		local k,v

--//		for k,v in ipairs(trackselection_state.courses) do
--//			wm.DeleteResource(v)
--//		end


	end,


	items = {

	},

}



function trackselection_createcourselayout(showclass)
	local curclass=trackselection_state.class

	local parent=GetWindow("icon_frame")


	trackselection_state.icons={}

	local y,x,_y,_x

	for _y,y in ipairs(trackselection_layout[curclass]) do
		trackselection_state.icons[_y]={}

		for _x,x in ipairs(y) do
			local w=addchild(Button{Name=string.format("%dx%d",_x,_y),Position=x[1],Size=GetResourceSize(track_icons[x[2]]),Parent=parent})

			local v=Classes[trackselection_state.class].Courses[x[3][1]][x[3][2]]

			w.icon=x[2]

			local position=PlayerProfile:GetLevelPosition(v.Level)

			if GameFlow.GetGameMode() == "SPLITSCREEN" and GameFlow.GetEventType() == "STUNT" and not Levels[v.Level].StuntMode then
				w.locked=true
				w:AttachResource(track_icons_inactive[w.icon])
			elseif position  ~= 255 then
				w:AttachResource(track_icons[w.icon]) --//w:AttachResource(track_items.courseicon1)
				w.locked=nil

				 if position > 0 and position < 4 then
					 local medals = {
						 "first",
						 "second",
						 "third",
					 }
					
					 addchild(Button{Position=POS(45,27),Size=GetResourceSize(menucommon[medals[position]]),Parent=w}):AttachResource(menucommon[medals[position]])
				end
			else
				w.locked=true
				w:AttachResource(track_icons_inactive[w.icon])
		    end

			trackselection_state.icons[_y][_x]=w
		end
	end

end

